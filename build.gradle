//---- 🔌 플러그인 설정 ----
plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${gradleDependencyManagementVersion}"
    id 'checkstyle'
}

//---- 📦 모든 하위 프로젝트 공통 설정 ----
allprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.spring.dependency-management'

    java {
        sourceCompatibility = JavaVersion.valueOf("VERSION_${javaVersion}")
        targetCompatibility = JavaVersion.valueOf("VERSION_${javaVersion}")
    }

    group = 'com.c4cometrue'
    version = version

    repositories {
        mavenCentral()
    }

    // 📏 Checkstyle 설정
    checkstyle {
        configFile = file("${rootDir}/naver-checkstyle.xml")
        configProperties = ["suppressionFile": "${rootDir}/naver-checkstyle-suppressions.xml"]
        toolVersion = checkstyleVersion
    }

    // ✅ 테스트 설정
    tasks.withType(Test) {
        useJUnitPlatform()
    }
}

subprojects {
    dependencies {
        // Core Spring Boot Dependencies
        implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
        implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
        implementation "org.springframework.retry:spring-retry:${springRetryVersion}"

        // QueryDSL - 대부분의 모듈에서 사용
        implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
        annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationVersion}"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api:${jakartaPersistenceVersion}"

        // Lombok - 모든 모듈에서 사용
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        // DB
        runtimeOnly "mysql:mysql-connector-java:${mysqlVersion}"
        runtimeOnly "com.oracle.database.jdbc:ojdbc8:${oracleVersion}"
    }
}

//---- 🌟 Domain Layer ----
project(':member-module') {
    dependencies {
        implementation project(':common-module')
    }
}

project(':main-account-module') {
    dependencies {
        implementation project(':member-module')
        implementation project(':common-module')
    }
}

project(':saving-account-module') {
    dependencies {
        implementation project(':main-account-module')
        implementation project(':member-module')
        implementation project(':common-module')
    }
}

project(':settlement-module') {
    dependencies {
        implementation project(':common-module')
    }
}

project(':transfer-module') {
    dependencies {
        implementation project(':member-module')
        implementation project(':main-account-module')
        implementation project(':saving-account-module')
        implementation project(':common-module')
    }
}

project(':transfer-log-module') {
    dependencies {
        implementation project(':common-module')
    }
}

project(':reminder-module') {
    dependencies {
        implementation project(':member-module')
        implementation project(':transfer-module')
        implementation project(':common-module')
    }
}

//---- 🌐 Interface Layer ----
project(':interface-module') {
    dependencies {
        // swagger
        implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

        // Mapper
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        implementation project(':main-account-module')
        implementation project(':member-module')
        implementation project(':reminder-module')
        implementation project(':saving-account-module')
        implementation project(':settlement-module')
        implementation project(':transfer-module')
        implementation project(':transfer-log-module')
        implementation project(':common-module')
    }
}

project(':batch-module') {
    dependencies {
        implementation project(':interface-module')
        implementation "org.springframework.boot:spring-boot-starter-batch:${springBootVersion}"
    }
}

//---- 📚 Common Layer ----
project(':common-module') {
    dependencies {
        // Core Dependencies
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    }
}

//---- QueryDSL ----
def querydslDir = "src/main/generated"

tasks.withType(JavaCompile) {
    options.compilerArgs += "-parameters"
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}



sourceSets {
    main.java.srcDirs += [querydslDir]
}

clean {
    delete file(querydslDir)
}
