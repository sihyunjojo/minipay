//---- 📦 모든 하위 프로젝트 공통 설정 ----
allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'org.sonarqube'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    java {
        sourceCompatibility = JavaVersion.VERSION_17 // 자바 소스 호환 버전 지정
        targetCompatibility = JavaVersion.VERSION_17 // 바이트코드 타겟 JVM 버전 지정
    }

    group = 'com.c4cometrue' // 공통 group 설정 (Java 패키지 기준)
    version = '0.0.1-SNAPSHOT' // 공통 버전 설정

    repositories {
        mavenCentral() // 모든 모듈에서 사용할 중앙 저장소 선언
    }

    // 📏 Checkstyle 설정: 코드 스타일 규칙 및 예외 처리 파일 지정
    checkstyle {
        configFile = file("${rootDir}/naver-checkstyle.xml") // 코드 스타일 룰셋
        configProperties = ["suppressionFile": "${rootDir}/naver-checkstyle-suppressions.xml"] // 예외 규칙 지정
        toolVersion = "9.2" // Checkstyle 도구 버전 지정
    }

    // ✅ 테스트 설정 및 커버리지 리포트 연결
    tasks.withType(Test).configureEach {
        useJUnitPlatform() // JUnit 5 플랫폼 사용
        finalizedBy 'jacocoTestReport' // 테스트 후 JaCoCo 리포트 자동 생성
    }

    // 📊 JaCoCo 리포트 설정
    jacocoTestReport {
        reports {
            xml.required = true // SonarQube에서 사용될 XML 리포트 활성화
        }
    }
}

//---- 🧩 모든 하위 모듈(subprojects)에 적용할 빌드 설정 ----
subprojects {

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    }

}

//---- ⚙️ 루트에서 사용할 빌드스크립트 classpath 설정 (플러그인 사용을 위함) ----
//Gradle 자체가 작동하기 위해 필요한 라이브러리(플러그인 등)을 어디서 받을지 정의
buildscript {
    ext {
        springBootVersion = '3.1.4' // Spring Boot 버전 변수로 추출 (중복 방지)
    }
    repositories {
        mavenCentral() // Maven 저장소 선언
        gradlePluginPortal() // 💡 Gradle Plugin Portal: SonarQube 플러그인 등을 위해 필수
    }
    dependencies {
        // 루트 빌드 스크립트에서 사용할 클래스패스 의존성 선언
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.1.3")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.3.1.3277")
    }
}

//---- 🔍 SonarQube 분석 기능 활성화 ----
apply plugin: "org.sonarqube"

sonar {
    properties {
        property "sonar.projectKey", "C4-ComeTrue_c4-cometrue-assignment"
        property "sonar.organization", "c4-cometrue"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
    }
}


//todo: 왜 이렇게 바뀐지 확인.
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation project(':common-module')
    implementation project(':batch-module')
    implementation project(':interface-module')
    implementation project(':main-account-module')
    implementation project(':member-module')
    implementation project(':saving-account-module')
    implementation project(':settlement-module')
    implementation project(':transfer-module')
    implementation project(':transfer-log-module')

//    implementation 'org.apache.commons:commons-lang3:3.13.0'
//    implementation 'org.apache.commons:commons-collections4:4.4'
//    compileOnly 'org.projectlombok:lombok'
//    annotationProcessor 'org.projectlombok:lombok'

    // db
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // swagger
//    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

//  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'mysql:mysql-connector-java:8.0.33'
//    runtimeOnly 'com.oracle.database.jdbc:ojdbc8:21.11.0.0'

//    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
//    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
//    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
//    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

checkstyle {
    configFile = file("${rootDir}/naver-checkstyle.xml")
    configProperties = ["suppressionFile": "${rootDir}/naver-checkstyle-suppressions.xml"]
    toolVersion = "9.2"
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonar {
    properties {
        property "sonar.projectKey", "C4-ComeTrue_c4-cometrue-assignment"
        property "sonar.organization", "c4-cometrue"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
    }
}


// queryDSL
def querydslDir = "src/main/generated"

tasks.withType(JavaCompile) {
    options.compilerArgs += "-parameters"
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

sourceSets {
    main.java.srcDirs += [querydslDir]
}

clean {
    delete file(querydslDir)
}

